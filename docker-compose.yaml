version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: aurora-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: aurora_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/migrations:/docker-entrypoint-initdb.d/migrations:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d aurora_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - aurora-network

  migrate:
    build:
      context: .
      dockerfile: migrate.Dockerfile
    container_name: aurora-migrate
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - aurora-network

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: aurora-api
    restart: unless-stopped
    ports:
      - "9999:9999"
    volumes:
      - ./config.yaml:/app/config.yaml:ro
    depends_on:
      migrate:
        condition: service_completed_successfully
    networks:
      - aurora-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  ui:
    image: tuannguyensn2001/aurora-ui:latest
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
    restart: unless-stopped
    networks:
      - aurora-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://ui:3000/api/hello"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  aurora-network:
    driver: bridge
